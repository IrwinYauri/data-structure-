class BNode:
	def __init__(self, m):
		self.data = [None] * (m+1)
		self.children = [None] * (m+2)
		self.count = 0
		self.m = m

	def insert_into(self, value, index):
		j = self.count
		while j > index:
			self.data[j] = self.data[j-1]
			self.children[j+1] = self.children[j]
			j -= 1
		self.data[index] = value
		self.children[index+1] = self.children[index]
		self.count += 1

	def split(self, index):
		ptr = self.children[index]
		child0 = BNode(ptr.m)
		child1 = BNode(ptr.m)
		i = 0
		while i  < ptr.m // 2:
			child0.children[i] = ptr.children[i]
			child0.data[i] = ptr.data[i]
			child0.count += 1 
			i += 1
		child0.children[i] = ptr.children[i]
		mid = i 
		i += 1 # skip
		j = 0
		while i  < ptr.count:
			child1.children[j] = ptr.children[i]
			child1.data[j] = ptr.data[i]
			child1.count += 1 
			j += 1
			i += 1
		child1.children[j] = ptr.children[i]

		self.insert_into(ptr.data[mid], index)  
		self.children[index] = child0
		self.children[index+1] = child1 
		
	def insert(self, value):
		index = 0
		# binary_search
		while index < self.count and  self.data[index] < value : 
			index += 1

		if self.children[index] == None: # Leaf node
			self.insert_into(value, index)
		else: 
			state = self.children[index].insert(value)
			if state == -1 :
				self.split(index)
		return -1 if self.count > self.m else 1 


def print_rec(ptr, level):
	if ptr != None:
		i = ptr.count - 1
		while i >= 0:
			print_rec(ptr.children[i+1], level + 1)
			for j in range(level):
				print("   ", end = "")	
			print(ptr.data[i])
			i -= 1
		print_rec(ptr.children[0], level + 1)

def split_root(ptr):
	child0 = BNode(ptr.m)
	child1 = BNode(ptr.m)
	i = 0
	while i  < ptr.m // 2:
		child0.children[i] = ptr.children[i]
		child0.data[i] = ptr.data[i]
		child0.count += 1 
		i += 1
	child0.children[i] = ptr.children[i]
	mid = i 
	i += 1 # skip
	j = 0
	while i  < ptr.count:
		child1.children[j] = ptr.children[i]
		child1.data[j] = ptr.data[i]
		child1.count += 1 
		j += 1
		i += 1
	child1.children[j] = ptr.children[i]

	ptr.data[0] = ptr.data[mid]
	ptr.children[0] = child0
	ptr.children[1] = child1
	ptr.count = 1


class BTree:
	def __init__(self, m = 4):
		self.m = m
		self.root = BNode(m)

	def insert(self, value):
		state = self.root.insert(value)		
		if state == -1:
			# print('split_root')
			split_root(self.root)

	def print(self):
		print("****************************")
		print_rec(self.root, 0)


btree = BTree(4)
# btree.insert(2)
# btree.insert(4)
# btree.insert(6)
# btree.insert(8)

# btree.print()
# btree.insert(5) 

# btree.print()

# btree.insert(0) 
# btree.insert(1)

# btree.print() 
# btree.insert(-1) 

# btree.print() 

for i in range(0, 200):
	btree.insert(i) 
	btree.print() 
